# -*- coding: utf-8 -*-
"""Heart Disease ML_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18yE-DpunqnuSlCYNNLBadlD_XXsPyB4T
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import pickle

print("Starting model training process...")

# --- 1. Load the Dataset ---
try:
    # IMPORTANT: Make sure 'heart.csv' is in the same directory as this script.
    df = pd.read_csv('/content/heart (2).csv')
    print("Dataset 'heart.csv' loaded successfully.")
except FileNotFoundError:
    print("Error: 'heart.csv' not found. Please place the dataset file in the same directory.")
    exit() # Exit the script if the file is not found

# --- 2. Data Preprocessing ---
# Convert categorical features into numerical format using one-hot encoding.
df_processed = pd.get_dummies(df, columns=['Sex', 'ChestPainType', 'RestingECG', 'ExerciseAngina', 'ST_Slope'], drop_first=True)
print("Data preprocessing (one-hot encoding) complete.")

# --- 3. Model Training ---
# Define the features (X) and the target (y)
X = df_processed.drop('HeartDisease', axis=1)
y = df_processed['HeartDisease']

# Split data into training and testing sets for evaluation
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
print("Data split into training and testing sets.")

# Initialize and train the RandomForestClassifier
model = RandomForestClassifier(n_estimators=150, random_state=42, max_depth=5)
model.fit(X_train, y_train)
print("Model training is complete.")

# --- 4. Model Evaluation ---
# Make predictions on the test set to check accuracy
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy on test data: {accuracy * 100:.2f}%")

# --- 5. Save the Trained Model ---
# The model and the column order are saved to be used by the app.
model_data = {
    'model': model,
    'columns': X.columns
}

with open('heart_disease_model.pkl', 'wb') as file:
    pickle.dump(model_data, file)

print("\nProcess finished. Model has been saved as 'heart_disease_model.pkl'.")

from google.colab import files

print("\n⬇️ Downloading file...")
files.download('heart_disease_model.pkl')

import joblib

model = joblib.load("heart_disease_model.pkl")
print(type(model))



